[ { "title": "快速入门系列（四）——第一个Flask程序", "url": "/posts/flask-fast-start/", "categories": "快速入门", "tags": "Flask, 快速入门系列, 使用教程", "date": "2022-09-23 06:00:00 +0000", "snippet": "Flask是什么？如果你做过Web开发，并且知道什么是框架，那你只需要记住，Flask是一个非常轻量级的Web应用开发框架如果你没有做过Web开发，但学过数据库、高级编程语言和html+css+JavaScript三剑客，那么你可以这样理解Flask：Flask是一门用Python开发的语言，你可以只用这门语言就完成一个软件的开发，包括这个软件的页面开发、数据库开发和服务器开发那么这篇文章我们将教大家如何写第一个Flask程序，按照计算机学习的传统艺能，我们第一个程序当然是教大家输出一个Hello World！！！嘿嘿嘿！！！ 前方高能！！！请准备好一台电脑！！！跟着动手操作！！！软件准备在开始我们的程序编写前，先根据以下安装几个软件： Python（必备，下Python3.x系列版本的，自带pip）:https://www.python.org/downloads/ pip：Python的一个安装插件，用它可以下载别人写好的代码给自己用 Pycharm（Python的集成开发环境，类似于DevC++这些，可以不安装，如果需要可以安装）：https://www.jetbrains.com/pycharm/download/ Visual Studio Code（代码编辑器，和Pycharm一样有需要安装就行了）： pipenv：在完成Python下载后，按下键盘Windows键（长相是一个windows的图标）+R键，在弹出的对话框中输入cmd，在对话框中输入： pip --version 查看pip是否存在，然后输入： pip install pipenv 等待下载完成 环境部署以D盘为例，在D盘新建一个文件夹flaskstudy，并在其中创建文件夹helloworld。然后，不要打开helloworld，直接在空白处，点击鼠标右键，点击“在终端中打开”，在里面输入：pipenv install出现这样的内容就成功了：接着输入：pipenv shell出现以下就成功了：然后，我们安装Flask：pipenv install flask等待安装完毕就好了。 注意：pipenv是由python替你创建的虚拟环境，每次运行Flask程序前都要先在命令行输入： pipenv shell Pycharm的安装及使用教程请看快速入门系列——Pycharm的安装及使用教程代码编写首先，不要关闭命令行！！！看向文件夹，打开helloworld，新建一个文本文档文件并打开，在里面输入：FLASK_ENV=development 记得等号前后别加空格保存，并把文件名连同后缀名一起改成“.flaskenv”。这个文件是Flask环境的配置文件，简单来说，它告诉Flask现在是开发环境，Flask便会根据它去自动配置服务器的环境 什么是环境？ 你可以理解为，它是一堆参数，用来告诉计算机，我要用什么打开我的文件，它应该怎么展示出来，我需要哪些系统的数据等等… 注意flaskenv前面是有点的。 可能会弹出窗口告诉你更改后会不可用，直接确定就行再新建一个文本文档，在里面写上这样一段：from flask import Flaskapp = Flask(__name__)@app.route('/')def index(): return '&lt;h1&gt;hello world&lt;/h1&gt;'然后，保存，并把文件名连同后缀名一起改成“app.py”最后，在命令行里输入：cd helloworld然后输入：flask run出现这个界面就成功了：可以看到这样一句话：Running on http://127.0.0.1:5000这就是告诉你，你的代码已经生成了一个网页，我们将http://127.0.0.1:5000复制到浏览器的“输入网址”中，就可以看到我们的成果了：这是怎么实现的呢？我们回过来先解读下代码：from flask import Flask这是Python引入包的方式，和Java的import，C/C++的#include是一样的，意思就是引入Flask包里的flask对象app = Flask(__name__) # __name__：如果你的代码名为hello.py，那么这里__name__的值就是hello这里你可以理解为，我们将app.py这个代码改造为了一个名为app的Web应用程序。@app.route('/')为app这个Web应用程序设置一个路由（也就是为它设置一个网址），默认为127.0.0.1，端口号为5000。 如果括号里的值改为(‘/home’)，那么我们在访问的时候就需要在浏览器中输入http://127.0.0.1:5000/home 端口号就相当于：我们给别人提供一个访问这个网址的大门，这个大门有很多，比如：8080 def index(): return '&lt;h1&gt;hello world&lt;/h1&gt;'这里一般称为视图函数，需要紧接着@app.route()这个函数。简单来说，这个函数的返回值会直接显示到上面设置的网址上。 如果@app.route()里面的参数是’/’，那这个视图函数一般要把函数名，命名为index，这是一种默认的规则。在浏览器中，比如你打开百度（www.baidu.com），它的html文件的命名一般是index.html 如果你学过html基础，又刚好知道html的body标签，那么我可以告诉你，如果返回的不是网页文件，那么返回值一般会插入到body标签内退出程序我们看到结果后，回到命令行窗口，按下Ctrl+C，再输入exit，然后关闭我们的命令行窗口即可。好啦，以上就是第一个Flask程序的编写，关于Flask后续的教学，我会一一跟进" }, { "title": "快速入门系列（三）——GitHub和Gitee注册", "url": "/posts/github&gitee-signup/", "categories": "快速入门", "tags": "Git, 快速入门系列, GitHub, Gitee, 远程仓库", "date": "2022-09-22 09:00:00 +0000", "snippet": " 我们前面已经教过如何使用Git，当时提到过远程仓库，那么：如何快速拥有一个自己的远程仓库呢？主流的远程仓库有： GitHub：全世界最大的男性交友网站（doge）。开个玩笑，其实它是一个面向开源的软件项目托管平台。即，你可以用它获得一个免费的远程仓库。GitHub仓库的创建简单、方便，唯一不足的就是，容易掉线。。。 Gitee：国内的软件项目托管平台。因为是国内的，所以好处就是不会掉线，并且不存在语言障碍。对个人而言它也是免费的。 GitLab：GitLab支持自行搭建远程仓库，一般企业都会搭建自己的远程仓库。对新手不太友好，但是嘛最终都会学到滴~ 我们主要教大家如何注册GitHub和Gitee 注：Gitee注册及创建仓库教学在下面，大家根据自己的需要选择性注册。注册GitHub并创建自己的远程仓库首先，打开GitHub的网址：https://github.com（记得用谷歌的Chrome或者Firefox浏览器，不然无法完成一系列验证）进入后我们会看到一个很漂亮的页面：点击右上角的Sign up，然后会弹出一个输入框，稍微等待下，它就会出现这样一个画面：输入自己的邮箱，你的邮箱号就是你以后的登录账号。点击Continue。然后输入密码，再Continue：输入你的用户名，因为GitHub是英文网站，所以取名字记得用英文哦：然后它会问你，愿意接收它给你发邮件吗？我的建议是填y（yes），GitHub一般也只会发重要信息给你：填完后，点击最下方的Create Account就可以啦GitHub会对你进行真人验证，并给你发一个邮箱验证信息，注意查看你的邮箱哦。之后：选择Just me，选择Student，点击Continue之后一直点Continue就行了当你进入到类似这个页面，就说明注册成功了：此时，点击右上角的“+”号，点击New repository然后我们就可以创建自己的仓库了： Repository name：填写仓库名称，这里建议，你的软件项目文件夹的名称是什么，就填什么。 Description：填写你对这个软件项目的一个介绍 Public/Private：如果选择Public，那么别人可以看到你的仓库；如果选择Private，那么只有你自己和有你授权的账户才可以查看 Initialize this repository with：对你的仓库进行初始化 Add a README file：添加一个md格式的文档，类似于软件使用说明书，可以自行修改 Add .gitignore：添加一个名字为.gitignore的文件，文件里每一行记录一个完整的文件名或者文件的后缀名。在你使用Git提交文件时，它就不会提交里面记录的文件 比如说： 如果你不想提交文件夹里的.ppt文件，你只需要在.gitignore文件里另起一行，写上.ppt 如果你不想提交test.doc文件，那么只需要在.gitignore文件里另起一行，写上test.doc 你也可以在创建之初就通过.gitignore template选择好要不想提交的文件类型 Choose a license：添加一个LICENSE文件，即证书，这个证书的作用相当于告诉别人，你享有这个软件的著作权，你允许别人拿你的软件做什么，不允许别人拿你的软件做什么，一般初学的时候可以暂时不使用 在填写完毕后点击Create repository就创建完毕啦。然后我们会进入这样一个界面：让我们由上到下讲解一下（以我的这个仓库为例）： 第一行 FaP8235/first，即GitHub用户名/远程仓库名 Unwatch：项目谁可见 Fork：别人可以通过这个将你的项目文件复制到他的远程仓库中 Star：别人对你的项目推荐指数 第二行 Code：代码文件都会显示在这里 Issues：如果你的代码有bug但自己不会修，你可以在这里发布类似求助的信息，别人看到后可以根据这个帮你修bug Pull requests：如果别人帮你修好了bug，要把代码上传给你，就会发送这个推送请求，请求你把他的代码合并到你的仓库中，你可以在这里决定合并或者不给他合并 Actions：这里会显示你从本地仓库提交文件到远程仓库时，文件的提交状态（提交成功/提交失败/正在提交） Projects：如果你想和别人在你的远程仓库上，一起开发一个项目，那就可以用这个 Wiki：其实就是发布贴子，和博客的功能相近。 Security：对你的项目进行安全保障，防止你的密码、API token、敏感数据等泄露，控制他人的访问权限等 Insights：通过这个可以看你远程仓库中的项目的状态（包括你的项目更改过几次，谁为你的项目修过bug，贡献过代码，谁把你的项目添加到了远程仓库等等等等） Settings：对你的项目属性进行设置。比如：更改你的项目名，设定你的项目合作成员，为你的项目配置运行环境等等 第三行 Quick setup —— if you’ve done this kind of thing before 快速搭建你的远程仓库文件，也就是将本地仓库的项目文件提交到远程仓库 这里有三种方式提交（具体提交方式，下次一定）： 通过HTTPS提交：把git里的远程仓库的地址设为https格式，每次从本地仓库提交文件时都需要输入账号密码。 通过SSH提交：需要你将自己电脑的ssh添加到github上，再设置git里的远程仓库地址 通过GitHub Desktop提交：没错，GitHub有桌面版APP，大大简化了提交流程，你只需要点击按钮就可以提交。 基本上，了解这些就已经掌握了GitHub的大部分基本使用技巧了注册Gitee并创建自己的远程仓库事先声明，因为没有语言障碍，Gitee的注册过程比较简单，我就不细讲了打开网址：https://www.gitee.com/，点击右上角注册，注册流程和注册各大网站的账户相同注册成功后点击右上角的“+”号，点击创建仓库，进入以下界面：仓库名称：建议填写为你的软件项目文件夹的名称归属：这个仓库是谁的路径：也就是分支（main分支，maomi分支，gougou分支随便取，但一定要有一个main分支）开源/私有/企业内部开源： 开源：别人可以看你的远程仓库，并且可以获取里面的代码 私有：除了你和你授权的账户，都不可以访问这个仓库 企业内部开源：个人一般用不到，我就不做介绍了初始化仓库： 设置语言：你的项目用什么编程语言开发的就填什么； 设置.gitignore：添加一个名字为.gitignore的文件，文件里每一行记录一个完整的文件名或者文件的后缀名。在你使用Git提交文件时，它就不会提交里面记录的文件。 比如说： 如果你不想提交文件夹里的.ppt文件，你只需要在.gitignore文件里另起一行，写上.ppt 如果你不想提交test.doc文件，那么只需要在.gitignore文件里另起一行，写上test.doc 你也可以在创建之初就通过.gitignore template选择好要不想提交的文件类型 设置开源许可证：添加一个LICENSE文件，即证书，这个证书的作用相当于告诉别人，你享有这个软件的著作权，你允许别人拿你的软件做什么，不允许别人拿你的软件做什么，一般初学的时候可以暂时不使用 设置模板： Readme：添加一个md格式的文档，类似于软件使用说明书，可以自行修改 Issue：对自己项目的存在问题的书写模板 如何理解Issue模板？ 其实就相当于你写求助信息，但是别人已经为你制作好求助信息表，你只需要填写具体内容就行，而不用自己制表。 Pull request：合并请求书写模板 如何理解Pull request模板？ 就相当于申请表，你只需要填表中的内容，然后等待申请通过就行，这让你免于自己再去造一张表或是一层一层地去申请。 选择分支类型：相当于，gitee为你自动生成分支，而不用你每次都要自己去创建分支。 什么时候需要创建分支？ 比如一辆车，你想造奔驰，他想造宝马，汽车最终的成品不一样，但原型相同。这时候，我们只需要去仿制（git clone或者git fork）一个原型，在这个原型的基础上造不同的汽车就好了。设置好上述内容后，点击创建即可。然后我们会进入类似这样的一个界面：我们由上到下讲解下（以我的这个仓库为例）： 第一行 Fap8235/uni-shop2：即用户名/仓库名 Watching：项目谁可见 Star：别人对你项目的推荐指数 Fork：通过这个别人可以将你的项目复制到他的远程仓库中 第二行： 代码：你的代码文件可以在这里打开查看 Issues：如果你的代码有bug但自己不会修，你可以在发布类似求助的信息，别人看到后可以根据这个帮你修bug。 Pull requests：如果别人帮你修好了bug，要把代码上传给你，就会发送这个推送请求，请求你把他的代码合并到你的仓库中，你可以在这里决定合并或者不给他合并 Wiki：其实就是发布贴子，和博客的功能相近。 统计：统计我们向远程仓库提交了几次文件、整个仓库的文件大小、别人的访问次数、谁为你贡献了代码等等 流水线：企业用来进行自动化管理的一个工具，要钱，咱也用不到 服务：包括Gitee和各种第三方工具，可以为你提供搭建服务器、运行代码等等功能 管理：对你的项目属性进行设置。比如：更改你的项目名，设定你的项目合作成员，为你的项目配置运行环境等等 第三行（这里只讲克隆/下载，其他下次一定）： 点击克隆/下载后，我们会发现它给出一个HTTPS、SSH还有SVN、SVN+SSH，后两者适合企业开发使用，不做讲解。 这里提供了两种方式提交本地文件到远程仓库（具体提交方式下次一定）： 通过HTTPS提交：把git里的远程仓库的地址设为https格式，每次从本地仓库提交文件时都需要输入账号密码。 通过SSH提交：需要你将自己电脑的ssh添加到gitee上，再设置git里的远程仓库地址 基本上，了解这些就已经掌握了Gitee的大部分基本使用技巧了" }, { "title": "快速入门系列（一）——Git简介及安装教程", "url": "/posts/git-install/", "categories": "快速入门", "tags": "Git, 快速入门系列, 安装教程", "date": "2022-09-22 07:30:00 +0000", "snippet": "什么是Git？举个例子： 第一天，甲方让你做了一个方案A。 第二天，甲方让你改方案A为方案B。 第三天，甲方让你找回方案A。 如果你直接在方案A的文件上改内容并保存，那么等你需要找回方案A的时候，就会发现找不到了，这时候就很绝望QAQ而如果你将方案A改后的内容另存为方案B，你又需要多建一个文件，多保存一份，慢慢的随着方案的增多，你就会发现，电脑存储空间不够了啊啊啊！！！于是，发明了Linux的带佬Linus，便用了==一周==时间，写出了Git！！！它让我们可以方便的找回方案A，并且只保存方案B中和方案A不同的部分，节省我们的存储空间！！！同样的，Git适用于我们对项目进行更改，因为我们的软件项目，可能随时需要我们更改代码那么，Git怎么用呢？我们先要下载Git：下载链接：https://git-scm.com/打开网址后点红框里的Download for Windows：跟着红框点就好啦：等待下载，下载结束后，我们打开这个exe文件，进行安装。然后，接下来的步骤，如果我没有明确说的，点next就好了。（顺带一提，这里引用了CSDN的博主mukes的文章图片，需要的话可以查看他的Git安装教程）这里建议不要存在C盘，一般我们存储在D、E盘哈，点击”Browse…“更改路径：这里的话有需要勾上就好了，没需要的话就不用勾了：勾上左下角的“Don’t create a Start Menu folder”：其他的就点“Next”，“Install”和“Finish”就好啦。" }, { "title": "快速入门系列（二）——Git使用教程", "url": "/posts/git-use/", "categories": "快速入门", "tags": "Git, 快速入门系列, 使用教程", "date": "2022-09-22 07:30:00 +0000", "snippet": "如何开始使用Git首先，打开我们的项目文件夹，在空白处鼠标右键，点击Git Bash Here（Win10，Win11用户如果看不到的话点击“显示更多选项”，就可以看到了：其次，我们得有个身份，表明这个项目，是我做的：git config user.name usernamegit config user.email username@email.com username是你的用户名，你可以随意取 username@email.com是你的邮箱地址，你可以填你的qq邮箱 然后，我们要把我们的文件，改造成一个“仓库”，也就是初始化：cd 你需要初始化的文件夹的绝对路径git init ==注意：==你的项目文件应该放在同一个文件夹里，因为git的初始化是对整个文件夹的初始化接着，我们就去写BUG啦AwA（开个玩笑，其实是写代码）。写完之后，先检查我们对文件做了哪些更改：git status以我自己更改后的项目为例：看不懂吗，我来教你：On branch main：你现在，在main分支上。你现在做的所有操作，都是对主分支的操作。Git的main分支就像孙悟空的主体，你可以给它分出无数个分身，也就是给你的项目文件创造分支（maomi分支，gougou分支命名随意），在没修改分支内容前，它们和main分支除了名字，没有不同点。 怎么查看已有分支呢？git branch -v 怎么创建分支呢？git branch 分支名Your branch is up to date with ‘origin/main’：你现在做的一切修改，都是对origin/main做的修改。origin其实相当于装下所有分支的一个文件夹，如果你换到了maomi分支，那它就会显示’origin/maomi’。 怎么切换到另一个分支呢？git checkout 分支名Changes not staged for commit：文件还不能提交到仓库。这里你会很纳闷，我不是已经保存了吗，为什么还不能提交呢？其实是因为我们还没有把我们的文件保存到暂存区。你只是保存了文件，但是git它没有追踪到你的文件。简单来说，Git不知道你需要提交哪些文件。于是呢，我们要让Git知道我们做的更改，这里Git也提示我们： use “git add/rm &lt; file &gt;…” to update what will be committed：告诉Git我们需要提交哪些文件。 use “git restore &lt; file &gt; …” to discard changes in working directory：撤销我们对项目的更改内容，不过一般用不到下面标红的deleted也就是说，你在写代码时被你删除了的文件。然后是，Untracked files，未追踪的文件，也就是Git还不知道这些文件你需不需要提交。红色的部分就是==你做过修改的文件，Git猜测这可能是你需要提交的文件==no changes added to commit (use “git add” and/or “git commit -a”)：你对项目文件的更改还未提交，使用这两个方法提交。==之后我会教你们一套更简便的流程，所以这里不用细看==好了，了解了状态之后，我们就可以提交了：git add .这是将项目的所有文件添加到缓存区中： 缓存区是留给我们后悔的地方。如果我们提交前发现我们的文件出错了或者有的文件我们不想提交，可以将文件撤销：git rm --cache 文件名 如果添加到缓存区后发现还有文件需要修改，那么可以在修改后再调用一次==git add .==接着，我们将文件提交到本地仓库：git commit -m \"注释\" 本地仓库相当于一个提供给别人复制的文件夹，这个文件夹里面的所有文件都可以给别人获取，仓库名一般会是你的项目名 注释是向别人解释，你提交到仓库里的东西是什么最后，我们将文件发送到远程仓库：提交之前我们先得检查我们提交的远程仓库是否正确：git remote -v如果没有远程仓库，那么我们就要添加一个远程仓库：git remote add origin 远程仓库地址如果远程仓库的地址不对，我们就要删除这个地址：git remote rm origin发送前先要检查缓存区中的内容是否都提交到本地仓库了：git status出现以下英文后：git push origin 分支名 注意看图中蓝色的部分，括号里的master就是分支名 在这个分支做的修改，不能直接发送到另一个分支里等待它的提交，如果提交过程中没有报错，那就成功啦！！！然后，别人如果想要获得你的项目文件，并保存在他自己的电脑上，就可以，新建一个文件夹，在文件夹里面打开git bash：git clone 远程仓库地址如果别人想把你的项目保存在它的远程仓库里，那他可以： 在浏览器中打开你的远程仓库地址 点击Fork（看到右上角的红框了吗）： " }, { "title": "你好，世界！", "url": "/posts/hello-world/", "categories": "随笔", "tags": "生活", "date": "2022-09-22 03:00:00 +0000", "snippet": "感谢关注～这里可以放代码片段噢～//代码片段int main(){ hello world;}" } ]
